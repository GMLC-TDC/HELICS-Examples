# @Author: Allison Campbell <camp426>
# @Date:   2021-08-17T11:13:01-07:00
# @Email:  allison.m.campbell@pnnl.gov
# @Last modified by:   camp426
# @Last modified time: 2021-11-15T12:21:29-08:00



import json
import sys, os
import subprocess
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
plt.style.use('ggplot')

def tsplot(x, y, n=20, percentile_min=1, percentile_max=99, color='r', plot_mean=True, plot_median=False, line_color='k', **kwargs):
    '''
    This is a plotting helper function. It calculate the lower and upper percentile groups, skipping 50 percentile.
    '''
    perc1 = np.percentile(y, np.linspace(percentile_min, 50, num=n, endpoint=False), axis=0)
    perc2 = np.percentile(y, np.linspace(50, percentile_max, num=n+1)[1:], axis=0)

    if 'alpha' in kwargs:
        alpha = kwargs.pop('alpha')
    else:
        alpha = 1/n
    # fill lower and upper percentile groups
    for p1, p2 in zip(perc1, perc2):
        plt.fill_between(x, p1, p2, alpha=alpha, color=color, edgecolor=None)
    if plot_mean:
        plt.plot(x, np.mean(y, axis=0), color=line_color)
    if plot_median:
        plt.plot(x, np.median(y, axis=0), color=line_color)

    return plt.gca()

def main():
    # variable inputs from execution
    samples = 30
    output_path = os.getcwd()
    numEVs = 10
    hours = 24
    plot = 0
    run = 1
    if len(sys.argv) > 1:
        samples = sys.argv[1]
        output_path = sys.argv[2]
        numEVs = sys.argv[3]
        hours = sys.argv[4]
        plot = sys.argv[5]
        run = sys.argv[6]
    print (f"Generating {samples} samples")
    # variable inputs set internal
    out_json = output_path+'/cli_runner_scripts'
    out_data = output_path+'/results'
    if not os.path.exists(out_json):
        os.makedirs(out_json)
    if not os.path.exists(out_data):
        os.makedirs(out_data)
    offset = 10
    cli_filename = []
    for i in range(int(samples)):
        cli_filename.append(out_json+"/advanced_orchestration_runner_"+str(i)+".json")
        cli = open(cli_filename[i], "w")
        cli_json = json.dumps(
        {
            "federates": [
                {
                    "directory": output_path,
                    "exec": "helics_broker --federates=2 --loglevel=data --coretype=tcpss --port 12345",
                    "host": "localhost",
                    "name": "broker_"+str(i),
                    "loglevel": "data"
                },
                {
                    "directory": output_path,
                    "exec": "python3 Battery.py --port 12345 --seed "+str(i+offset)+" --numEVs "+str(numEVs)+" --hours "+str(hours)+" --plot "+str(plot)+" --outdir "+out_data,
                    "host": "localhost",
                    "name": "Battery_"+str(i),
                    "loglevel": "data"
                },
                {
                    "directory": output_path,
                    "exec": "python3 Charger.py --port 12345 --numEVs "+str(numEVs)+" --hours "+str(hours),
                    "host": "localhost",
                    "name": "Charger_"+str(i),
                    "loglevel": "data"
                }
            ],
            "name": "Generated by make samples"
        },
        indent=4, sort_keys=True)


        cli.write(cli_json)
        cli.close()

    if int(run) == 1:
        print('running simulations')
        peak = []
        for i in range(int(samples)):
            print('running file ',cli_filename[i])
            subprocess.call('helics run --path='+cli_filename[i],shell=True)
            if i == 0:
                df = pd.read_csv(out_data+r'/peak_power_at_all_evs_'+str(i+offset)+'.csv')
            else:
                df = pd.read_csv(out_data+r'/peak_power_at_all_evs_'+str(i+offset)+'.csv')
                df.drop(['Hour'], axis=1, inplace=True)
            peak.append(df)

        peak_power = pd.concat(peak, axis=1)
        t = np.array(peak_power.Hour)
        y = np.array(peak_power.iloc[:,1:]).T
        tsplot(t, y, n=100, percentile_min=2.5, percentile_max=97.5, plot_median=True, plot_mean=False, color='g', line_color='navy')
        plt.ylabel('kW')
        plt.xlabel('Hours')
        plt.plot()
        plt.show()
    else:
        print('not running simulations')

if __name__ == "__main__":
    main()
