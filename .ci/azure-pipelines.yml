jobs:
- job: Native
  strategy:
    matrix:
      Linux:
        imageName: "ubuntu-16.04"
      macOS:
        imageName: "macos-10.14"
      Windows:
        imageName: "windows-2019"
  pool:
    vmImage: $(imageName)

  steps:
  # -----------------------
  # Install dependencies
  # -----------------------
  # Linux
  - bash: |
      sudo apt-get install -y libzmq5-dev ninja-build
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Linux - Install ZeroMQ and Ninja
  # macOS
  - bash: |
      brew install zeromq ninja boost
    condition: eq( variables['Agent.OS'], 'Darwin' )
    displayName: macOS - Install Boost, ZeroMQ, and Ninja

  # -----------------------
  # Checkout HELICS
  # -----------------------
  - bash: |
      cmake --version
      git clone https://github.com/GMLC-TDC/HELICS
      cd HELICS
      git checkout ${HELICS_COMMITISH:-develop}
      if [[ "${HELICS_PR_TARGET}" != "" ]]; then
        git config --global user.email "helicsbot@helics.org"
        git config --global user.name "HELICS-bot"
        git merge --no-commit --no-ff origin/${HELICS_PR_TARGET} || exit $?
      fi
      git submodule update --init --recursive
    displayName: Checkout HELICS

  # -----------------------
  # Configure HELICS
  # -----------------------
  # Linux, macOS
  - task: CMake@1
    inputs:
      workingDirectory: HELICS/build
      cmakeArgs: -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_HELICS_TESTS=OFF -DBUILD_HELICS_EXAMPLES=OFF ..
    displayName: 'Linux/macOS - Configure HELICS'
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
  # Windows
  - task: CMake@1
    inputs:
      workingDirectory: HELICS/build
      cmakeArgs: -Ax64 -DCMAKE_BUILD_TYPE=Release -DBUILD_HELICS_TESTS=OFF -DBUILD_HELICS_EXAMPLES=OFF ..
    displayName: 'Windows - Configure HELICS'
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  # -----------------------
  # Install HELICS
  # -----------------------
  - bash: |
      if [ -x "$(command -v sudo)" ]; then
        sudo cmake --build . --target install
      else
        cmake --build . --target install
      fi
    displayName: 'Install HELICS'
    workingDirectory: HELICS/build
  
  # -----------------------
  # Set HELICS_DIR env var
  # -----------------------
  # Windows
  - bash: |
      dir=$(find C:/local -mindepth 1 -maxdepth 1 -type d -iname 'helics*')
      echo "##vso[task.setvariable variable=HELICS_DIR]$dir"
    displayName: 'Windows - Set HELICS_DIR env var'
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
  
  # -----------------------
  # Configure Examples
  # -----------------------
  # Linux, macOS
  - task: CMake@1
    inputs:
      cmakeArgs: -GNinja -DCMAKE_BUILD_TYPE=Release ..
    displayName: 'Linux/macOS - Configure HELICS-Examples'
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
  # Windows
  - task: CMake@1
    inputs:
      cmakeArgs: -Ax64 -DCMAKE_BUILD_TYPE=Release ..
    displayName: 'Windows - Configure HELICS-Examples'
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
  
  # -----------------------
  # Build Examples
  # -----------------------
  - bash: |
      if [ -x "$(command -v sudo)" ]; then
        sudo cmake --build .
      else
        cmake --build .
      fi
    displayName: 'Build Examples'
    workingDirectory: build

- job: Report_Results
  displayName: Report Results
  dependsOn: Native
  condition: and(succeededOrFailed(), variables['HELICS_PR_TARGET'], variables['HELICS_PR_SLUG'], variables['HELICS_PR_NUM'])
  steps:
  - bash: |
      .ci/report-results.sh
    env:
      HELICSBOT_GH_TOKEN: $(HELICSBot.GH.Token)
