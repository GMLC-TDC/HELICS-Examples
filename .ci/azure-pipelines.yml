strategy:
  matrix:
    linux:
      imageName: "ubuntu-16.04"
    mac:
      imageName: "macos-10.14"
    windows:
      imageName: "vs2017-win2016"
  maxParallel: 3

pool:
  vmImage: $(imageName)

steps:
# -----------------------
# Install dependencies
# -----------------------
# Linux
- bash: |
    sudo apt-get install -y libzmq5-dev ninja-build
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Linux - Install ZeroMQ and Ninja
# macOS
- bash: |
    brew install zeromq ninja boost
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: macOS - Install Boost, ZeroMQ, and Ninja
# Windows
- bash: |
    choco install ninja
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Windows - Install Ninja

# -----------------------
# Checkout HELICS
# -----------------------
- bash: |
    cmake --version
    git clone https://github.com/GMLC-TDC/HELICS-src
    cd HELICS-src
    git checkout zmq_subproject
    git submodule update --init --recursive
  displayName: Checkout HELICS

# -----------------------
# Configure HELICS
# -----------------------
# Linux, macOS
- task: CMake@1
  inputs:
    workingDirectory: HELICS-src/build
    cmakeArgs: -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_HELICS_TESTS=OFF -DBUILD_HELICS_EXAMPLES=OFF ..
  displayName: 'Linux/macOS - Configure HELICS'
  condition: ne( variables['Agent.OS'], 'Windows_NT' )
# Windows
- task: CMake@1
  inputs:
    workingDirectory: HELICS-src/build
    cmakeArgs: -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_HELICS_TESTS=OFF -DBUILD_HELICS_EXAMPLES=OFF ..
  displayName: 'Windows - Configure HELICS'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

# -----------------------
# Install HELICS
# -----------------------
- bash: |
    if [ -x "$(command -v sudo)" ]; then
      sudo cmake --build . --target install
    else
      cmake --build . --target install
    fi
  displayName: 'Install HELICS'
  workingDirectory: HELICS-src/build
